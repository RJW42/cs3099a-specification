openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/chocol4te/supergroup_a_hybrid/1.0.0
info:
  description:
    $ref: Description.md
  version: "1.0.0"
  title: "Supergroup A Protocol"
tags:
  - name: Caching
    description:
      $ref: Caching.md
  - name: communities
  - name: posts
paths:
  /fed/communities:
      get:
        tags:
          - communities
        summary: Gets a list of the IDs of communities on the server
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: string
                    format: "^[a-zA-Z0-9-_]{1,24}$"
                example: [
                  "cats",
                  "dogs",
                  "cs3099",
                  "physics",
                  ]
          '400':
            description: Bad Request
          '500':
            description: Internal Server Error

  /fed/communities/{id}:
      get:
        tags:
          - communities
        summary: Gets a community by ID
        parameters:
          - in: path
            name: id
            description: "ID of the community being requested"
            required: true
            schema:
              type: string
              format: "^[a-zA-Z0-9-_]{1,24}$"
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Community'
          '400':
            description: Bad Request
          '404':
            description: Not Found
          '500':
            description: Internal Server Error

  /fed/communities/{id}/timestamps:
    get:
      tags:
        - communities
      summary: Gets the timestamps of last modification of all posts in a community
      parameters:
        - in: path
          name: id
          description: "ID of the community being requested"
          required: true
          schema:
            type: string
            format: "^[a-zA-Z0-9-_]{1,24}$"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostTimestamp'
              example: [
                  {"id": "884f0f3c-04d9-4d93-bb9c-b140ff262a53", "modified": 1602868491},
                  {"id": "07f3c861-88a9-46f3-bd0e-9346fb6b5342", "modified": 1552832552},
                  {"id": "802402b4-0644-4282-9e0a-6b179c9f6e58", "modified": 1602149423}
                  ]
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

  /fed/posts:
    get:
      tags:
        - posts
      summary: Gets all posts matching filters
      parameters:
        - name: limit
          in: query
          description: Filters by the n latest posts
          required: false
          explode: true
          schema:
            type: integer
        - name: community
          in: query
          description: Filters posts by community
          required: false
          explode: true
          schema:
            type: string
        - name: minDate
          in: query
          description: Filters by minimum creation date
          required: false
          explode: true
          schema:
            type: integer
            format: unix_timestamp
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
        '500':
            description: Internal Server Error
    post:
      tags:
        - posts
      summary: Creates a new post
      description: |
        If the post is in response to another post, the `title`
        field must be set to `null`.
        
        Servers may decide which `contentType`s they will accept
        as posts (including comments), however they must at least
        accept `text`. If the server does not accept a particular
        `contentType` then it should return a `501` error.
        
        If a server can not render `contentType` `markdown`, it
        should display it as plain text (as opposed to rejecting
        the request).
      requestBody:
        description: New post to be added to a community
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
        '500':
            description: Internal Server Error
        '501':
            description: Not Implemented

  /fed/posts/{id}:
    get:
        tags:
          - posts
        summary: Gets a post
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: string
              format: uuidv4
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Post'
          '400':
            description: Bad Request
          '404':
            description: Not Found
          '500':
            description: Internal Server Error

    put:
        tags:
          - posts
        summary: Edits a post
        description: "Only allowed if request is made by the server associated with the author or the admins of the community the post belongs to, 403 returned otherwise"
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: string
              format: uuidv4
        requestBody:
          description: New post to be added to a community
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePost'
        responses:
          '200':
            description: OK
          '400':
            description: Bad Request
          '403':
            description: Forbidden
          '404':
            description: Not Found
          '500':
            description: Internal Server Error
    delete:
        tags:
          - posts
        summary: Deletes a post
        description: "Only allowed if request is made by the server associated with the author or the admins of the community the post belongs to, 403 returned otherwise"
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: string
              format: uuidv4
        responses:
          '200':
            description: OK
          '400':
            description: Bad Request
          '403':
            description: Forbidden
          '404':
            description: Not Found
          '500':
            description: Internal Server Error

components:
  schemas:
    UserId:
      type: object
      required:
        - id
        - host
      properties:
        id:
          type: string
          format: "^[a-zA-Z0-9-_]{1,24}$"
          example: "coolusername123"
        host:
          type: string
          example: "cooldomain.edu"

    Community:
      type: object
      required:
        - id
        - title
        - description
        - admins
      properties:
        id:
          type: string
          format: "^[a-zA-Z0-9-_]{1,24}$"
          example: "cs3099"
        title:
          type: string
          example: "CS3099: Group Project"
        description:
          type: string
          example: "CS3099 community for discussion, tutorials and quizzes!"
        admins:
          type: array
          items:
            $ref: '#/components/schemas/UserId'
          example: [{
            "id": "coolusername123",
            "host": "cooldomain.edu"
          }]

    NewPost:
      description: >
        Use the `Host` HTTP header to get the host of the server
        that the user belongs to.
      type: object
      required:
        - parent
        - title
        - contentType
        - body
        - author
      properties:
        parent:
          type: string
          format: "uuidv4 OR ^[a-zA-Z0-9-_]{1,24}$"
          example: "dafca76d-5883-4eff-959a-d32bc9f72e1a"
        title:
          type: string
          example: "Bezos's Wealth Overflows 64-bit Unsigned Integer, Is Now Homeless"
        contentType:
          type: string
          example: "text"
        body:
          type: string
          example: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
        author:
          type: string
          format: "^[a-zA-Z0-9-_]{1,24}$"
          example: "coolusername123"

    UpdatePost:
      type: object
      properties:
        title:
          type: string
          example: "Bezos's Wealth Overflows 64-bit Signed Integer, Now Massively In Debt"
        contentType:
          type: string
          example: "text"
        body:
          type: string
          example: "Sed ut perspiciatis, unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam eaque ipsa, quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt, explicabo. Nemo enim ipsam voluptatem, quia voluptas sit, aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos, qui ratione voluptatem sequi nesciunt, neque porro quisquam est, qui dolorem ipsum, quia dolor sit amet consectetur adipisci[ng]velit, sed quia non-numquam [do] eius modi tempora inci[di]dunt, ut labore et dolore magnam aliquam quaerat voluptatem."

    Post:
      type: object
      required:
        - id
        - children
        - title
        - contentType
        - body
        - author
        - modified
        - created
      properties:
        id:
          type: string
          format: uuidv4
          example: "5ab3acce-e9d1-4b3a-be97-60d2cbe32a4c"
        parent:
          type: string
          format: "uuidv4 OR ^[a-zA-Z0-9-_]{1,24}$"
          example: "dafca76d-5883-4eff-959a-d32bc9f72e1a"
        children:
          type: array
          items:
            type: string
            format: uuidv4v4
          example: ["b78b29f4-88d2-4500-b3f9-704449b262e2", "53da9025-0ba3-4966-8703-824c7418172a", "d2073b6a-3115-4089-b198-6db799bc53ad"]
        title:
          type: string
          example: "Bezos's Wealth Overflows 64-bit Signed Integer, Now Massively In Debt"
        contentType:
          type: string
          example: "text"
        body:
          type: string
          example: "Sed ut perspiciatis, unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam eaque ipsa, quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt, explicabo. Nemo enim ipsam voluptatem, quia voluptas sit, aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos, qui ratione voluptatem sequi nesciunt, neque porro quisquam est, qui dolorem ipsum, quia dolor sit amet consectetur adipisci[ng]velit, sed quia non-numquam [do] eius modi tempora inci[di]dunt, ut labore et dolore magnam aliquam quaerat voluptatem."
        author:
          $ref: '#/components/schemas/UserId'
        modified:
          type: integer
          example: 1552832552
        created:
          type: integer
          example: 1552832584

    PostTimestamp:
      type: object
      required:
        - id
        - timestamp
      properties:
        id:
          type: string
          format: uuidv4
          example: "5ab3acce-e9d1-4b3a-be97-60d2cbe32a4c"
        modified:
          type: integer
          example: 1552832552
